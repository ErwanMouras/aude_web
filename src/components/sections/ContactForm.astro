---
// Contact form component with enhanced UX and security
---

<section class="contact-form-section bg-[#2c2c2c] text-white py-16">
  <div class="container mx-auto px-6">
    <div class="max-w-4xl mx-auto">
      <!-- Form Header -->
      <div class="text-center mb-12">
        <h2 class="text-3xl md:text-4xl font-light mb-4" data-translate="contact-form-title">
          Contactez-nous pour votre projet
        </h2>
        <p class="text-lg text-gray-300" data-translate="contact-form-subtitle">
          Partagez vos idées et obtenez un devis personnalisé
        </p>
      </div>
      
      <!-- Contact Form -->
      <form id="contact-form" class="contact-form space-y-6" novalidate>
        <!-- First Row: Name and Email -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="form-group">
            <label for="fullName" class="form-label text-white" data-translate="full-name-label">
              Nom complet *
            </label>
            <input 
              type="text" 
              id="fullName" 
              name="fullName" 
              class="form-input bg-white text-gray-900" 
              placeholder="Votre nom complet"
              data-translate="full-name-placeholder"
              required 
            />
            <div class="error-message text-red-400 text-sm mt-1 hidden"></div>
          </div>
          
          <div class="form-group">
            <label for="email" class="form-label text-white" data-translate="email-label">
              Adresse e-mail *
            </label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              class="form-input bg-white text-gray-900" 
              placeholder="votre@email.com"
              data-translate="email-placeholder"
              required 
            />
            <div class="error-message text-red-400 text-sm mt-1 hidden"></div>
          </div>
        </div>
        
        <!-- Second Row: Phone and Project Type -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="form-group">
            <label for="phone" class="form-label text-white" data-translate="phone-label">
              Numéro de téléphone
            </label>
            <input 
              type="tel" 
              id="phone" 
              name="phone" 
              class="form-input bg-white text-gray-900" 
              placeholder="+33 6 12 34 56 78"
              data-translate="phone-placeholder"
            />
          </div>
          
          <div class="form-group">
            <label for="projectType" class="form-label text-white" data-translate="project-type-label">
              Type de projet *
            </label>
            <select id="projectType" name="projectType" class="form-select bg-white text-gray-900" required>
              <option value="" data-translate="select-project-type">Sélectionnez un type</option>
              <option value="renovation" data-translate="renovation">Rénovation</option>
              <option value="interior-design" data-translate="interior-design">Décoration intérieure</option>
              <option value="layout" data-translate="layout">Aménagement</option>
              <option value="architecture" data-translate="architecture">Architecture</option>
              <option value="furniture" data-translate="furniture-design">Design de mobilier</option>
              <option value="lighting" data-translate="lighting-design">Éclairage</option>
              <option value="other" data-translate="other">Autre</option>
            </select>
            <div class="error-message text-red-400 text-sm mt-1 hidden"></div>
          </div>
        </div>
        
        <!-- Project Description -->
        <div class="form-group">
          <label for="projectDescription" class="form-label text-white" data-translate="project-description-label">
            Description du projet *
          </label>
          <textarea 
            id="projectDescription" 
            name="projectDescription" 
            rows="4" 
            class="form-textarea bg-white text-gray-900" 
            placeholder="Décrivez brièvement votre projet, vos besoins et vos attentes..."
            data-translate="project-description-placeholder"
            required
          ></textarea>
          <div class="error-message text-red-400 text-sm mt-1 hidden"></div>
        </div>
        
        <!-- Third Row: Budget and Start Date -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="form-group">
            <label for="budget" class="form-label text-white" data-translate="budget-label">
              Budget estimé
            </label>
            <select id="budget" name="budget" class="form-select bg-white text-gray-900">
              <option value="" data-translate="select-budget">Sélectionnez votre budget</option>
              <option value="under-10k" data-translate="under-10k">Moins de 10 000€</option>
              <option value="10k-50k" data-translate="10k-50k">10 000€ - 50 000€</option>
              <option value="over-50k" data-translate="over-50k">Plus de 50 000€</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="startDate" class="form-label text-white" data-translate="start-date-label">
              Date de début souhaitée
            </label>
            <input 
              type="date" 
              id="startDate" 
              name="startDate" 
              class="form-input bg-white text-gray-900"
            />
          </div>
        </div>
        
        <!-- File Upload -->
        <div class="form-group">
          <label for="files" class="form-label text-white" data-translate="files-label">
            Joindre des fichiers
          </label>
          <div class="relative">
            <input 
              type="file" 
              id="files" 
              name="files" 
              multiple 
              accept="image/*,.pdf,.dwg" 
              class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            />
            <div class="form-input bg-white text-gray-500 cursor-pointer flex items-center justify-between">
              <span data-translate="choose-files">Choisir des fichiers</span>
              <span class="text-xs" data-translate="file-info">(Images, plans, PDF acceptés)</span>
            </div>
          </div>
          <div id="file-list" class="mt-2 space-y-1"></div>
        </div>
        
        <!-- Cloudflare Turnstile -->
        <div class="form-group">
          <div class="cf-turnstile" data-sitekey="YOUR_SITE_KEY"></div>
          <div class="error-message text-red-400 text-sm mt-1 hidden"></div>
        </div>
        
        <!-- GDPR Consent -->
        <div class="form-group">
          <label class="flex items-start space-x-3 cursor-pointer">
            <input 
              type="checkbox" 
              id="gdprConsent" 
              name="gdprConsent" 
              class="mt-1 w-5 h-5 accent-white" 
              required
            />
            <span class="text-sm text-gray-300" data-translate="gdpr-consent">
              J'accepte que mes informations soient utilisées pour répondre à ma demande conformément à la 
              <a href="/privacy-policy" class="text-white underline hover:text-gray-300">politique de confidentialité</a> *
            </span>
          </label>
          <div class="error-message text-red-400 text-sm mt-1 hidden"></div>
        </div>
        
        <!-- Submit Button -->
        <div class="form-actions text-center">
          <button 
            type="submit" 
            class="btn-primary bg-white text-black hover:bg-gray-100 px-12 py-4 text-lg" 
            data-translate="send-message"
          >
            Envoyer la demande
          </button>
        </div>
        
        <!-- Form Messages -->
        <div id="contact-message" class="text-center mt-6"></div>
      </form>
    </div>
  </div>
</section>

<!-- Cloudflare Turnstile Script -->
<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>

<script>
  class ContactForm {
    constructor() {
      this.form = document.getElementById('contact-form');
      this.messageContainer = document.getElementById('contact-message');
      this.fileInput = document.getElementById('files');
      this.fileList = document.getElementById('file-list');
      this.emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
      
      this.init();
    }
    
    init() {
      // Form submission
      this.form?.addEventListener('submit', (e) => this.handleSubmit(e));
      
      // File input change
      this.fileInput?.addEventListener('change', (e) => this.handleFileChange(e));
      
      // Real-time validation
      const inputs = this.form?.querySelectorAll('input[required], select[required], textarea[required]');
      inputs?.forEach(input => {
        input.addEventListener('blur', (e) => this.validateField(e.target));
      });
    }
    
    async handleSubmit(e) {
      e.preventDefault();
      
      // Validate form
      if (!this.validateForm()) {
        return;
      }
      
      // Get form data
      const formData = new FormData(this.form);
      
      // Show loading state
      const submitButton = this.form?.querySelector('button[type="submit"]');
      const originalText = submitButton?.textContent;
      if (submitButton) {
        submitButton.textContent = 'Envoi en cours...';
        submitButton.setAttribute('disabled', 'true');
      }
      
      try {
        const response = await fetch('/.netlify/functions/contact', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (response.ok) {
          this.showMessage('✅ Votre message a été envoyé avec succès ! Nous vous contacterons bientôt.', 'success');
          this.form?.reset();
          this.clearFileList();
        } else {
          throw new Error(result.error || 'Erreur lors de l\'envoi du message');
        }
      } catch (error) {
        this.showMessage(`❌ ${error.message}`, 'error');
      } finally {
        // Reset button state
        if (submitButton) {
          submitButton.textContent = originalText;
          submitButton.removeAttribute('disabled');
        }
      }
    }
    
    validateForm() {
      let isValid = true;
      
      // Validate required fields
      const requiredFields = this.form?.querySelectorAll('[required]');
      requiredFields?.forEach(field => {
        if (!this.validateField(field)) {
          isValid = false;
        }
      });
      
      return isValid;
    }
    
    validateField(field) {
      const value = field.value.trim();
      const errorEl = field.parentNode?.querySelector('.error-message');
      let isValid = true;
      let errorMessage = '';
      
      // Required validation
      if (field.hasAttribute('required') && !value) {
        isValid = false;
        errorMessage = 'Ce champ est obligatoire';
      }
      
      // Email validation
      if (field.type === 'email' && value && !this.emailRegex.test(value)) {
        isValid = false;
        errorMessage = 'Format d\'email invalide';
      }
      
      // Email length validation
      if (field.type === 'email' && value.length > 254) {
        isValid = false;
        errorMessage = 'L\'email est trop long';
      }
      
      // Show/hide error message
      if (errorEl) {
        if (isValid) {
          errorEl.classList.add('hidden');
          errorEl.textContent = '';
          field.classList.remove('border-red-500');
        } else {
          errorEl.classList.remove('hidden');
          errorEl.textContent = errorMessage;
          field.classList.add('border-red-500');
        }
      }
      
      return isValid;
    }
    
    handleFileChange(e) {
      const files = Array.from(e.target.files || []);
      this.updateFileList(files);
    }
    
    updateFileList(files) {
      if (!this.fileList) return;
      
      this.fileList.innerHTML = '';
      
      files.forEach(file => {
        const fileItem = document.createElement('div');
        fileItem.className = 'flex items-center justify-between bg-gray-100 px-3 py-2 rounded text-sm text-gray-700';
        fileItem.innerHTML = `
          <span>${file.name} (${this.formatFileSize(file.size)})</span>
          <button type="button" class="text-red-500 hover:text-red-700" onclick="this.parentNode.remove()">
            ✕
          </button>
        `;
        this.fileList.appendChild(fileItem);
      });
    }
    
    clearFileList() {
      if (this.fileList) {
        this.fileList.innerHTML = '';
      }
    }
    
    formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    showMessage(message, type) {
      if (!this.messageContainer) return;
      
      const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
      
      this.messageContainer.innerHTML = `
        <div class="${bgColor} text-white px-6 py-3 rounded-lg">
          ${message}
        </div>
      `;
      
      // Scroll to message
      this.messageContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
      
      // Clear message after 10 seconds
      setTimeout(() => {
        this.messageContainer.innerHTML = '';
      }, 10000);
    }
  }
  
  // Initialize contact form
  document.addEventListener('DOMContentLoaded', () => {
    new ContactForm();
  });
  
  // Re-initialize after page navigation
  document.addEventListener('astro:page-load', () => {
    new ContactForm();
  });
</script>